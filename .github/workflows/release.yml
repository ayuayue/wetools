name: Build And Release
on:
  push:
    tags:
      - "v*"
#    branches:
#      - main
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-latest, ubuntu-latest ]
        include:
          - os: windows-latest
            output-name: wetools-windows.zip
            build-command: flutter build windows --release --split-debug-info=symbols --tree-shake-icons --dart-define=Dart_DEBUG=false --no-null-assertions
            artifact-path: build/windows/x64/runner/Release
            platform: windows
          - os: macos-latest
            output-name: wetools-macos.zip
            build-command: flutter build macos --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions --no-pub
            artifact-path: build/macos/Build/Products/Release/wetools.app
            platform: macos
          - os: ubuntu-latest
            output-name: wetools-linux.tar.gz
            build-command: flutter build linux --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions
            artifact-path: build/linux/x64/release/bundle
            platform: linux
#          - os: ubuntu-latest
#            output-name: wetools-android.apk
#            build-command: flutter build apk --release --split-debug-info=symbols --tree-shake-icons --no-null-assertions
#            artifact-path: build/app/outputs/flutter-apk/app-release.apk
#            platform: android
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.3'
          channel: 'stable'

      # 添加 Android 构建相关配置
      - name: Set up Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # 设置 Android SDK
      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      # 配置 Android 签名
#      - name: Setup Android Signing
#        if: matrix.platform == 'android'
#        run: |
#          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
#          echo "storeFile=keystore.jks" >> android/key.properties
#          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
#          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
#          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev

      - name: Get dependencies
        run: flutter pub get

      # 添加 macOS 最低部署版本设置
      - name: Set macOS deployment target
        if: matrix.os == 'macos-latest'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=10.14.6" >> $GITHUB_ENV
          defaults write $(pwd)/macos/Runner/Info CFBundleMinimumOSVersion "10.14.6"
          plutil -replace LSMinimumSystemVersion -string "10.14.6" macos/Runner/Info.plist
          # 修改 Podfile 中的部署目标
          sed -i '' 's/platform :osx.*/platform :osx, '"'10.14.6'"'/' macos/Podfile
          # 运行 pod install
          cd macos && pod install && cd ..

      - name: Build application
        run: |
          flutter config --enable-windows-desktop
          flutter config --enable-macos-desktop
          flutter config --enable-linux-desktop
          flutter config --enable-android
          ${{ matrix.build-command }}
      # 添加平台对应的打包步骤
      - name: Package Artifact for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path "${{ matrix.artifact-path }}\*" -DestinationPath "wetools-windows.zip"

      - name: Package Artifact for macOS
        if: matrix.os == 'macos-latest'
        run: |
          # macOS 下可以用 ditto 命令打包为 zip 文件
          ditto -c -k --sequesterRsrc --keepParent "${{ matrix.artifact-path }}" wetools-macos.zip

      - name: Package Artifact for Linux
        if: matrix.os == 'ubuntu-latest' && matrix.platform == 'linux'
        run: |
          # 打包为 tar.gz 文件
          tar -czvf wetools-linux.tar.gz -C "${{ matrix.artifact-path }}" .

      # 添加 Android APK 复制步骤
#      - name: Copy Android APK
#        if: matrix.platform == 'android'
#        run: |
#          cp "${{ matrix.artifact-path }}" wetools-android.apk

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            ${{ matrix.os == 'windows-latest' && 'wetools-windows.zip' || '' }}
            ${{ matrix.os == 'macos-latest' && 'wetools-macos.zip' || '' }}
            ${{ (matrix.os == 'ubuntu-latest' && matrix.platform == 'linux') && 'wetools-linux.tar.gz' || '' }}
#            ${{ matrix.platform == 'android' && 'wetools-android.apk' || '' }}

      # 注释掉或删除这些步骤
      # - name: Import Certificate
      #   if: matrix.os == 'macos-latest'
      #   uses: apple-actions/import-codesign-certs@v1
      #   with:
      #     p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
      #     p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      # - name: Sign and Notarize
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     codesign --force --deep --sign "${{ secrets.APPLE_DEVELOPER_IDENTITY }}" "${{ matrix.artifact-path }}"
      #     ditto -c -k --sequesterRsrc --keepParent "${{ matrix.artifact-path }}" wetools-macos.zip
      #     xcrun notarytool submit wetools-macos.zip --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait

  release:
    runs-on: ubuntu-latest
    needs: build    # 等待所有构建 Job 完成后再执行
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: show workspace
        run: tree -L 3 -a --dirsfirst

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload Release Assets - Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux/wetools-linux.tar.gz
          asset_name: wetools-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets - Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/wetools-windows.zip
          asset_name: wetools-windows.zip
          asset_content_type: application/zip

      - name: Upload Release Assets - macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos/wetools-macos.zip
          asset_name: wetools-macos.zip
          asset_content_type: application/zip

      # 添加 Android APK 上传步骤
#      - name: Upload Release Assets - Android
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./artifacts/android/wetools-android.apk
#          asset_name: wetools-android.apk
#          asset_content_type: application/vnd.android.package-archive

